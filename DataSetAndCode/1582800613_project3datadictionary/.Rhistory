dim(data)##duplicate removed
# age 	 age in years
# sex 	 (1 = male; 0 = female)
# cp 	 chest pain type
# trestbps 	 resting blood pressure (in mm Hg on admission to the hospital)
# chol 	 serum cholestoral in mg/dl
# fbs 	 (fasting blood sugar > 120 mg/dl) (1 = true; 0 = false)
# restecg 	 resting electrocardiographic results
# thalach 	 maximum heart rate achieved
# exang 	 exercise induced angina (1 = yes; 0 = no)
# oldpeak 	 ST depression induced by exercise relative to rest
# slope 	 the slope of the peak exercise ST segment
# ca 	 number of major vessels (0-3) colored by flourosopy
# thal 	 3 = normal; 6 = fixed defect; 7 = reversable defect
# target 	 1 or 0
##changing column names into meaningful names
data <- rename(data,
chest_pain_type=cp,
resting_blood_pressure = trestbps,
cholestrol = chol,
fasting_blood_sugar = fbs,
resting_ecg = restecg,
max_heart_rate = thalach,
exercise_induced_angina = exang,
st_depression = oldpeak,
st_slope = slope,
major_vessels = ca,
thalessimia = thal
)
names(data)
# 3.Get a preliminary statistical summary of the data. Explore the measures of central tendencies and the spread of the data overall.
summary(data)
rapply(data,function(x)length(unique(x)))
data %>% summarise_all(funs(n_distinct(.)))
##It is clear that columns such as sex,chest_pain_type,fasting_blood_sugar,
##resting_ecg,exercise_induced_angina,st_slope,major_vessels,thalessimia,target
##shouldnt be of numeric type and can be converted to factors for better analysis
##converting
names(Filter(is.factor, data))
str(data)
data$sex[data$sex == 0] <- "female"
data$sex[data$sex == 1] <- "male"
data$sex
str(data$sex)
data <- data.frame(read_excel("data.xlsx"))
data
head(data)
tail(data)
dim(data)
class(data)
str(data)##Notice all the data types are in Numeric and some needs to be converted to char/factors wherever applicable
##1.Perform preliminary data inspection and report the findings as the structure of the data, missing values, duplicates, etc.
##2.Based on the findings from the previous question remove duplicates (if any) and treat missing values using an appropriate strategy.
names(data)
names(data)<- gsub(' ','_',names(data)) ##Removing WS in col names if any and replacing with '_'
names(data)
colSums(is.na(data))###no missing values
sum(duplicated(data))##1 duplicated data
data <-unique(data)
dim(data)##duplicate removed
# age 	 age in years
# sex 	 (1 = male; 0 = female)
# cp 	 chest pain type
# trestbps 	 resting blood pressure (in mm Hg on admission to the hospital)
# chol 	 serum cholestoral in mg/dl
# fbs 	 (fasting blood sugar > 120 mg/dl) (1 = true; 0 = false)
# restecg 	 resting electrocardiographic results
# thalach 	 maximum heart rate achieved
# exang 	 exercise induced angina (1 = yes; 0 = no)
# oldpeak 	 ST depression induced by exercise relative to rest
# slope 	 the slope of the peak exercise ST segment
# ca 	 number of major vessels (0-3) colored by flourosopy
# thal 	 3 = normal; 6 = fixed defect; 7 = reversable defect
# target 	 1 or 0
##changing column names into meaningful names
data <- rename(data,
chest_pain_type=cp,
resting_blood_pressure = trestbps,
cholestrol = chol,
fasting_blood_sugar = fbs,
resting_ecg = restecg,
max_heart_rate = thalach,
exercise_induced_angina = exang,
st_depression = oldpeak,
st_slope = slope,
major_vessels = ca,
thalessimia = thal
)
names(data)
# 3.Get a preliminary statistical summary of the data. Explore the measures of central tendencies and the spread of the data overall.
summary(data)
rapply(data,function(x)length(unique(x)))
data %>% summarise_all(funs(n_distinct(.)))
##It is clear that columns such as sex,chest_pain_type,fasting_blood_sugar,
##resting_ecg,exercise_induced_angina,st_slope,major_vessels,thalessimia,target
##shouldnt be of numeric type and can be converted to factors for better analysis
##converting
names(Filter(is.factor, data))
catcols <- c("sex","chest_pain_type","fasting_blood_sugar","resting_ecg",
"exercise_induced_angina","st_slope","major_vessels","thalessimia","target")
data[catcols] <- lapply(data[catcols], factor)
str(data$sex)
data$sex
data$sex <- recode_factor(data$sex, 0 = "female",
1 = "male")
data$sex <- recode_factor(data$sex, 0 = "female", 1 = "male")
data$sex
data$sex <- recode_factor(data$sex, '0' = "female", '1' = "male")
data$sex
##changing chest_pain_type to typical angina , atypical angina , non-anginal pain, asymptomatic
data$chest_pain_type
data$chest_pain_type <- recode_factor(data$chest_pain_type, '0' = "typical angina", '1' = "angina",
'2' = 'non-anginal pain',
'3' = 'asymptomatic' )
##changing chest_pain_type to typical angina , atypical angina , non-anginal pain, asymptomatic
data$chest_pain_type
##changing fasting blood sugar
data$fasting_blood_sugar
data$fasting_blood_sugar <- recode_factor(data$fasting_blood_sugar, '0' = "non-diabetic",
'1' = "diabetic")
##changing fasting blood sugar
data$fasting_blood_sugar
data$exercise_induced_angina
##changing resting_ecg
data$resting_ecg
data$resting_ecg <- recode_factor(data$resting_ecg, '0' = "normal",
'1' = "abnormal",
'2' = 'hyper' )
##changing resting_ecg
data$resting_ecg
##changing exercise_induced_angina
data$resting_ecg
##changing exercise_induced_angina
data$exercise_induced_angina
data$exercise_induced_angina <- recode_factor(data$exercise_induced_angina, '0' = "no",
'1' = "yes")
##changing exercise_induced_angina
data$exercise_induced_angina
data$st_slope
data$st_slope <- recode_factor(data$st_slope, '0' = "unsloping",
'1' = "flat",
'2' = "downsloping")
##changing st_slope
data$st_slope
data$thalessimia
str(data$thalessimia)
table(data$thalessimia)
table(data$st_slope)
table(data$resting_ecg)
table(data$exercise_induced_angina)
table(data$fasting_blood_sugar)
table(data$chest_pain_type)
table(data$sex)
str(data$sex)
table(data$resting_ecg)
table(data$thalessimia)
table(data$thalessimia)
data$thalessimia <- recode_factor(data$thalessimia, '0' = "2")
table(data$thalessimia)
data <- data.frame(read_excel("data.xlsx"))
data
setwd("C:/Users/anbha/OneDrive/Desktop/Purdue University/Course6-Capstone Project/Project Data Set/1582800613_project3datadictionary")
getwd()
data <- data.frame(read_excel("data.xlsx"))
data
head(data)
tail(data)
dim(data)
class(data)
str(data)##Notice all the data types are in Numeric and some needs to be converted to char/factors wherever applicable
##1.Perform preliminary data inspection and report the findings as the structure of the data, missing values, duplicates, etc.
##2.Based on the findings from the previous question remove duplicates (if any) and treat missing values using an appropriate strategy.
names(data)
names(data)<- gsub(' ','_',names(data)) ##Removing WS in col names if any and replacing with '_'
names(data)
colSums(is.na(data))###no missing values
sum(duplicated(data))##1 duplicated data
data <-unique(data)
dim(data)##duplicate removed
# age 	 age in years
# sex 	 (1 = male; 0 = female)
# cp 	 chest pain type
# trestbps 	 resting blood pressure (in mm Hg on admission to the hospital)
# chol 	 serum cholestoral in mg/dl
# fbs 	 (fasting blood sugar > 120 mg/dl) (1 = true; 0 = false)
# restecg 	 resting electrocardiographic results
# thalach 	 maximum heart rate achieved
# exang 	 exercise induced angina (1 = yes; 0 = no)
# oldpeak 	 ST depression induced by exercise relative to rest
# slope 	 the slope of the peak exercise ST segment
# ca 	 number of major vessels (0-3) colored by flourosopy
# thal 	 3 = normal; 6 = fixed defect; 7 = reversable defect
# target 	 1 or 0
##changing column names into meaningful names
data <- rename(data,
chest_pain_type=cp,
resting_blood_pressure = trestbps,
cholestrol = chol,
fasting_blood_sugar = fbs,
resting_ecg = restecg,
max_heart_rate = thalach,
exercise_induced_angina = exang,
st_depression = oldpeak,
st_slope = slope,
major_vessels = ca,
thalessimia = thal
)
names(data)
# 3.Get a preliminary statistical summary of the data. Explore the measures of central tendencies and the spread of the data overall.
summary(data)
rapply(data,function(x)length(unique(x)))
data %>% summarise_all(funs(n_distinct(.)))
##It is clear that columns such as sex,chest_pain_type,fasting_blood_sugar,
##resting_ecg,exercise_induced_angina,st_slope,major_vessels,thalessimia,target
##shouldnt be of numeric type and can be converted to factors for better analysis
##converting numeric to factors
catcols <- c("sex","chest_pain_type","fasting_blood_sugar","resting_ecg",
"exercise_induced_angina","st_slope","thalessimia")
data[catcols] <- lapply(data[catcols], factor)
##changing gender to male/female
data$sex
table(data$sex)
data$sex <- recode_factor(data$sex, '0' = "female", '1' = "male")
##changing chest_pain_type to typical angina , atypical angina , non-anginal pain, asymptomatic
data$chest_pain_type
table(data$chest_pain_type)
data$chest_pain_type <- recode_factor(data$chest_pain_type, '0' = "typical angina", '1' = "angina",
'2' = 'non-anginal pain',
'3' = 'asymptomatic' )
##changing fasting blood sugar
data$fasting_blood_sugar
table(data$fasting_blood_sugar)
data$fasting_blood_sugar <- recode_factor(data$fasting_blood_sugar, '0' = "non-diabetic",
'1' = "diabetic")
##changing resting_ecg
data$resting_ecg
table(data$resting_ecg)
data$resting_ecg <- recode_factor(data$resting_ecg, '0' = "normal",
'1' = "abnormal",
'2' = 'hyper' )
##changing exercise_induced_angina
data$exercise_induced_angina
table(data$exercise_induced_angina)
data$exercise_induced_angina <- recode_factor(data$exercise_induced_angina, '0' = "no",
'1' = "yes")
##changing st_slope
data$st_slope
table(data$st_slope)
data$st_slope <- recode_factor(data$st_slope, '0' = "unsloping",
'1' = "flat",
'2' = "downsloping")
##changing thalessimia
data$thalessimia
table(data$thalessimia)
##only three categories of thalessimia given
##1 = normal; 2 = fixed defect; 3 = reversable defect
##so converting 4th category i.e 0 to 2 (since 2 has the max no of values)
str(data$thalessimia)
data$thalessimia <- recode_factor(data$thalessimia, '0' = "2")
data
table(data$thalessimia)
data$thalessimia <- recode_factor(data$thalessimia, '1' = "normal",
'2'= "fixed defect",
'3'= "reversable defect")
##only three categories of thalessimia given
##1 = normal; 2 = fixed defect; 3 = reversable defect
##so converting 4th category i.e 0 to 2 (since 2 has the max no of values)
str(data$thalessimia)
table(data$thalessimia)
countvs <- table(mtcars$vs,mtcars$gear)
countvs
count1<-count(mtcars$cyl)
count2<-table(mtcars$gear)
count2
barplot(count1)
barplot(count2,
main = "Counts of Gears",
xlab = "No of Gears",
ylab = "Counts",
legend = rownames(count2),
args.legend = list(x ="topright",inset = c(-0.20,-0.5)),
col = c("red","blue","green"))
countvs <- table(mtcars$vs,mtcars$gear)
countvs
rownames(count2)
rownames(countvs)
barplot(countvs,
main = "Counts of Gears/VS",
xlab = "No of Gears and VS",
ylab = "Counts",
legend = rownames(countvs),
args.legend = list(x ="topright",inset = c(-0.20,-0.25)),
col = c("red","blue"))
countsgender<-table(data$sex)
countsgender
colnames(df) <- c("ID", "region", "species")
df
ggplot(df %>% count(region, species) %>%    # Group by region and species, then count number in each group
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(region, n, fill=species)) +
geom_bar(stat="identity")
ggplot(df %>% count(region, species) %>%    # Group by region and species, then count number in each group
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(region, n, fill=species)) +
geom_bar(stat="identity")
df2 <- df %>% count(region, species) %>%    # Group by region and species, then count number in each group
mutate(pct=n/sum(n))
df2
df
df <- as.data.frame(matrix(nrow = 7, ncol= 3,
data = c("ID1", "ID2", "ID3", "ID4", "ID5", "ID6", "ID7",
"north", "north", "north", "north", "south", "south", "south",
"A", "B", "B", "C", "A", "A", "C"),
byrow = FALSE))
colnames(df) <- c("ID", "region", "species")
df
df2 <- df %>% count(region, species) %>%    # Group by region and species, then count number in each group
mutate(pct=n/sum(n))
df2
ggplot(df %>% count(region, species) %>%    # Group by region and species, then count number in each group
mutate(pct=n/sum(n)),              # Calculate percent within each region
aes(region, n, fill=species)) +
geom_bar(stat="identity")
countsgender
pct<- round(countsgender/sum(countsgender)*100)
labels <- paste(c("Female","Male"),"",pct,"%" )
pie(countsgender,labels = labels,main = "Gender Wise Distribution",
col = rainbow(5))
pie(countsgender,labels = labels,main = "Gender Wise Distribution",
col = rainbow(2))
pie(countsgender,labels = labels,main = "Gender Wise Distribution",
col = "Green","Red")
pie(countsgender,labels = labels,main = "Gender Wise Distribution",
col = rainbow(2))
countvs <- table(mtcars$vs,mtcars$gear)
countvs
rownames(count2)
rownames(countvs)
barplot(countvs,
main = "Counts of Gears/VS",
xlab = "No of Gears and VS",
ylab = "Counts",
legend = rownames(countvs),
args.legend = list(x ="topright",inset = c(-0.20,-0.25)),
col = c("red","blue"))
barplot(count2,
main = "Counts of Gears",
xlab = "No of Gears",
ylab = "Counts",
legend = rownames(count2),
args.legend = list(x ="topright",inset = c(-0.20,-0.5)),
col = c("red","blue","green"))
countChestPainType <- table(data$chest_pain_type)
countChestPainType
barplot(countChestPainType,
main = "Counts of Gears",
xlab = "No of Gears",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.5)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Counts of Gears",
xlab = "No of Gears",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.50,-0.5)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Counts of Gears",
xlab = "No of Gears",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.40,-0.5)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Counts of Gears",
xlab = "No of Gears",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.37,-0.5)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Counts of Gears",
xlab = "No of Gears",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.35,-0.5)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Counts of Gears",
xlab = "No of Gears",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.33,-0.5)),
col = c("red","blue","green","yellow"))
countChestPainType
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.30,-0.5)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.30,-0.7)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.40,-0.7)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.25,-0.7)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.7)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.1,-0.7)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.5)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.55)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.55)),
col = c("red","blue","green","yellow"))
pie(countsgender,labels = labels,main = "Gender Wise Distribution of Data",
col = c("red","blue"))
pie(countsgender,labels = labels,main = "Gender Wise Distribution of Data",
col = c("red","green"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.55)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",pch=c(1,2,3)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.55),pch=c(1,2,3)),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.55),cex=0.5),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.20,-0.25),cex=0.5),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.25,-0.25),cex=0.5),
col = c("red","blue","green","yellow"))
barplot(countChestPainType,
main = "Chest Pain Type",
xlab = "",
ylab = "Counts",
legend = rownames(countChestPainType),
args.legend = list(x ="topright",inset = c(-0.1,-0.25),cex=0.5),
col = c("red","blue","green","yellow"))
